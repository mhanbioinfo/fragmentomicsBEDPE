knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
require(tidyverse)
require(ggplot2)
library(Rsamtools)
library(GenomicAlignments)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
library(biovizBase) ## for GCcontent()
library(rtracklayer) ## for export.bed()
SRC_DIR="/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE_R_pkg/fragR_OOP_roxygen/"
source(paste0(SRC_DIR, "BEDPE_read_and_filter_forFrag.R"))
source(paste0(SRC_DIR, "fragRatio.compareToHealthy.R"))
source(paste0(SRC_DIR, "fragRatio.createFragSet.R"))
source(paste0(SRC_DIR, "fragRatio.gen100kbBins.R.R"))
source(paste0(SRC_DIR, "frag.compareToHealthy.R"))
source(paste0(SRC_DIR, "frag.createFragSet.R"))
source(paste0(SRC_DIR, "BEDPE_read_and_filter_forFrag.R"))
source(paste0(SRC_DIR, "frag.fragSetClass_createFragSet.R"))
source(paste0(SRC_DIR, "frag.compareToHealthy.R"))
source(paste0(SRC_DIR, "frag.gen100kbBins.R.R"))
source(paste0(SRC_DIR, "frag.gen100kbBins.R"))
source(paste0(SRC_DIR, "frag.gen5MbBins.R"))
source(paste0(SRC_DIR, "frag.genMitoReport.R"))
source(paste0(SRC_DIR, "frag.showAndGetterFunctions.R"))
source(paste0(SRC_DIR, "frag.writeOutputAndPlots.R"))
frag_resource = "/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE/extdata/"
filters_path=paste0(frag_resource,"filters.hg38.rda")
gaps_path=paste0(frag_resource,"gaps.hg38.rda")
VNTRs_path=paste0(frag_resource,"VNTRs.hg38.rda")
tiles_path=paste0(frag_resource,"hg38_tiles.bed")
healthy_path=paste0(frag_resource, "healthy.median.hg38.rda")
outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BAM/"
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted.bam",
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
fset = genMitoReport(fset)
fset = gen100kbBins(fset,
filters=filters_path, gaps=gaps_path,
VNTRs=VNTRs_path, tiles=tiles_path)
fset = gen5MbBins(fset)
fset = compareToHealthy(fset, healthy=healthy_path)
get100kbBins(fset)
get100kbBins(fset) %>% names()
get100kbBins(fset) %>% names() %>% dput()
get5MbBins(fset) %>% names() %>% dput()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
require(tidyverse)
require(ggplot2)
library(Rsamtools)
library(GenomicAlignments)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
library(biovizBase) ## for GCcontent()
library(rtracklayer) ## for export.bed()
get5MbDist(fset)
get5MbSummary(fset)
get5MbBins(fset) %>% names() %>% dput()
devtools::load_all()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
require(tidyverse)
require(ggplot2)
library(Rsamtools)
library(GenomicAlignments)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
library(biovizBase) ## for GCcontent()
library(rtracklayer) ## for export.bed()
SRC_DIR="/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE_R_pkg/fragR_OOP_roxygen/"
source(paste0(SRC_DIR, "BEDPE_read_and_filter_forFrag.R"))
source(paste0(SRC_DIR, "frag.fragSetClass_createFragSet.R"))
source(paste0(SRC_DIR, "frag.compareToHealthy.R"))
source(paste0(SRC_DIR, "frag.gen100kbBins.R"))
source(paste0(SRC_DIR, "frag.gen5MbBins.R"))
source(paste0(SRC_DIR, "frag.genMitoReport.R"))
source(paste0(SRC_DIR, "frag.showAndGetterFunctions.R"))
source(paste0(SRC_DIR, "frag.writeOutputAndPlots.R"))
frag_resource = "/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE/extdata/"
filters_path=paste0(frag_resource,"filters.hg38.rda")
gaps_path=paste0(frag_resource,"gaps.hg38.rda")
VNTRs_path=paste0(frag_resource,"VNTRs.hg38.rda")
tiles_path=paste0(frag_resource,"hg38_tiles.bed")
healthy_path=paste0(frag_resource, "healthy.median.hg38.rda")
outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BAM/"
# outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BEDPE/"
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted.bam",
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
devtools::load_all()
rm(list=ls())
devtools::load_all()
devtools::check()
devtools::check()
use_mit_license()
usethis::use_mit_license()
devtools::check()
?gen100kbBins()
?compareToHealthy()
devtools::check()
?compareToHealthy()
?createFragSet()
?compareToHealthy()
# knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(message = FALSE)
# knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
# require(tidyverse)
# require(ggplot2)
# library(Rsamtools)
# library(GenomicAlignments)
# library(GenomicRanges)
# library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
# library(biovizBase) ## for GCcontent()
# library(rtracklayer) ## for export.bed()
library(fragmentomicsBEDPE)
frag_resource = "/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE/extdata/"
filters_path=paste0(frag_resource,"filters.hg38.rda")
gaps_path=paste0(frag_resource,"gaps.hg38.rda")
VNTRs_path=paste0(frag_resource,"VNTRs.hg38.rda")
tiles_path=paste0(frag_resource,"hg38_tiles.bed")
healthy_path=paste0(frag_resource, "healthy.median.hg38.rda")
outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BAM/"
# outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BEDPE/"
?createFragSet
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted.bam",
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
# knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(message = FALSE)
# knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
# require(tidyverse)
# require(ggplot2)
# library(Rsamtools)
# library(GenomicAlignments)
# library(GenomicRanges)
# library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
# library(biovizBase) ## for GCcontent()
# library(rtracklayer) ## for export.bed()
library(fragmentomicsBEDPE)
frag_resource = "/Users/minghan/GDrive_minghanbio/1_Bioinformatics/_fragmentomics/fragRatioBEDPE/extdata/"
filters_path=paste0(frag_resource,"filters.hg38.rda")
gaps_path=paste0(frag_resource,"gaps.hg38.rda")
VNTRs_path=paste0(frag_resource,"VNTRs.hg38.rda")
tiles_path=paste0(frag_resource,"hg38_tiles.bed")
healthy_path=paste0(frag_resource, "healthy.median.hg38.rda")
outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BAM/"
# outdir_path = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/fragmentomicsBEDPE_OOP/TGL48_0011_Ct_T_PE_325_BEDPE/"
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted.bam",
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
library(GenomeInfoDb)
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted.bam",
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
# fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted_BEDPE",
#                      filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted_coordSortd.bedpe.gz",
#                      fileType = "bedpe",
#                      refGenome="BSgenome.Hsapiens.UCSC.hg38",
#                      chr.select=paste0("chr",1:22),
#                      width_min=90, width_max=220, mapQthreshold=30,
#                      keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
fset
fset = genMitoReport(fset)
# require(tidyverse)
# require(ggplot2)
# library(Rsamtools)
# library(GenomicAlignments)
# library(GenomicRanges)
# library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
library(biovizBase) ## for GCcontent()
# require(tidyverse)
# require(ggplot2)
# library(Rsamtools)
# library(GenomicAlignments)
# library(GenomicRanges)
# library(BSgenome.Hsapiens.UCSC.hg38) ## for 'Hsapiens'
# library(biovizBase) ## for GCcontent()
library(rtracklayer) ## for export.bed()
# require(tidyverse)
# require(ggplot2)
# library(Rsamtools)
library(GenomicAlignments)
devtools::install()
devtools::install()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::install()
library(tidyverse)
devtools::check()
devtools::install()
load(healthy)
devtools::check()
devtools::install()
devtools::install()
devtools::install()
usethis::create_package()
usethis::create_package("./")
pwd()
getwd()
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
usethis::use_vignette("fragmentomicsBEDPE_vignette")
devtools::check()
devtools::install()
#devtools::install_github("")
library(fragmentomicsBEDPE)
#devtools::install_github("")
library(fragmentomicsBEDPE)
# Example analysis
## Get resource files
```{r}
filters=system.file("extdata", "filters.hg38.rda", package = "fragmentomicsBEDPE")
gaps=system.file("extdata", "gaps.hg38.rda", package = "fragmentomicsBEDPE")
VNTRs=system.file("extdata", "VNTRs.hg38.rda", package = "fragmentomicsBEDPE")
tiles=system.file("extdata", "hg38_tiles.bed", package = "fragmentomicsBEDPE")
healthy=system.file("extdata", "healthy.median.hg38.rda", package = "fragmentomicsBEDPE")
example_bam_filepath=system.file("extdata", "example_file.bam", package = "fragmentomicsBEDPE")
example_bam_filepath
fset = createFragSet(sampleID = "example_bam",
filePath = example_bam_filepath,
fileType = "bam",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
example_bedpe_filepath=system.file("extdata", "example_file_coordSortd.bedpe.gz", package = "fragmentomicsBEDPE")
fset = createFragSet(sampleID = "example_bedpe",
filePath = example_bedpe_filepath,
fileType = "bedpe",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
#devtools::install_github("")
library(fragmentomicsBEDPE)
fset = createFragSet(sampleID = "example_bedpe",
filePath = example_bedpe_filepath,
fileType = "bedpe",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
fset = createFragSet(sampleID = "TGL48_0001_Ct_T_PE_325_WG.merged.sorted_BEDPE",
filePath = "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0011_Ct_T_PE_325_WG.merged.sorted_coordSortd.bedpe.gz",
fileType = "bedpe",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
library(tidyverse)
example_bedpe_filepath=system.file("extdata", "example_file_coordSortd.bedpe.gz", package = "fragmentomicsBEDPE")
fset = createFragSet(sampleID = "example_bedpe",
filePath = example_bedpe_filepath,
fileType = "bedpe",
refGenome="BSgenome.Hsapiens.UCSC.hg38",
chr.select=paste0("chr",1:22),
width_min=90, width_max=220, mapQthreshold=30,
keepDuplicates=FALSE, keepSecondaryAlignments=FALSE)
#devtools::install_github("")
library(tidyverse)
library(fragmentomicsBEDPE)
get100kbBins(fset)
fset
fset = gen100kbBins(fset, filters=filters, gaps=gaps, VNTRs=VNTRs, tiles=tiles)
fset = gen5MbBins(fset)
fset = compareToHealthy(fset, healthy=healthy)
get100kbBins(fset)
head(get100kbBins(fset),3)
print.data.frame(head(get100kbBins(fset),3))
print.data.frame(head(get100kbBins(fset)[,1:20],3))
print.data.frame(head(get100kbBins(fset)[,1:30],3))
print.data.frame(head(get100kbBins(fset)[,1:35],3))
print.data.frame(head(get5MbBins(fset)[,1:35],3))
print.data.frame(head(get5MbBins(fset),3))
print.data.frame(head(get5MbDist(fset),3))
print.data.frame(head(get5MbSummary(fset),3))
print.data.frame(head(get5MbSummary(fset)))
print.data.frame(get5MbSummary(fset))
get5MbBins(fset)
get5MbSummary(fset)
